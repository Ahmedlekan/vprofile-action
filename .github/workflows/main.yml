
name: vprofile actions

on: workflow_dispatch
env:
  AWS_REGION: us-east-1
  EKS_CLUSTER: vprofile-eks
  ECR_REPOSITORY: vprofileactions

jobs:
  Testing:
    runs-on: ubuntu-latest
    
    steps:
    - name: Code Checkout
      uses: actions/checkout@v4
    
    - name: Set up JDK 11
      uses: actions/setup-java@v3
      with:
        java-version: '11'
        distribution: 'temurin'
        cache: maven
    
    - name: Maven Test
      run: mvn test
        
    - name: checkstyle
      run: mvn checkstyle:checkstyle

    - name: SonarQube Scan
      uses: SonarSource/sonarcloud-github-action@v2
      with:
        args: >
          -Dsonar.projectKey=${{ secrets.SONAR_PROJECT_KEY }}
          -Dsonar.organization=${{ secrets.SONAR_ORGANIZATION }}
          -Dsonar.sources=src/
          -Dsonar.java.binaries=target/test-classes/com/visualpathit/account/controllerTest/
          -Dsonar.junit.reportsPath=target/surefire-reports/
          -Dsonar.jacoco.reportsPath=target/jacoco.exec
          -Dsonar.java.checkstyle.reportPaths=target/checkstyle-result.xml
      env:
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        SONAR_HOST_URL: ${{ secrets.SONAR_URL }}
      
    # - name: SonarQube Quality Gate
    #   id: sonarqube-quality-gate
    #   uses: sonarsource/sonarqube-quality-gate-action@master
    #   timeout-minutes: 5
    #   env:
    #     SONAR_TOKEN: ${{secrets.SONAR_TOKEN}}
    #     SONAR_HOST_URL: ${{secrets.SONAR_URL}}
  
  Build_and_Publish:
    runs-on: ubuntu-latest
    needs: Testing
    steps:
    - name: Code Checkout
      uses: actions/checkout@v4
  
    - name: upload image to ECR
      uses: appleboy/docker-ecr-action@master
      with:
        access_key: ${{ secrets.AWS_ACCESS_KEY_ID }}
        secret_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        registry: ${{ secrets.REGISTRY }}
        repo: ${{env.ECR_REPOSITORY}}
        region: ${{env.AWS_REGION}}
        tag: latest,${{ github.run_number }}
        daemon_off: false
        dockerfile: ./Dockerfile
        context: ./
  
  DeplaoyToEKS:
    runs-on: ubuntu-latest
    needs: Build_and_Publish
    steps:
    - name: Code Checkout
      uses: actions/checkout@v4
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
    
    - name: Get Kube Config File
      run: aws eks update-kubeconfig --name ${{env.EKS_CLUSTER}} --region ${{env.AWS_REGION}}
    
    - name: Print Config file
      run: cat ~/.kube/config

    - name: Login to ECR
      run: kubectl create secret docker-registry regcred --docker-server=${{secrets.REGISTRY}} --docker-username=AWS --docker-password=$(aws ecr get-login-password)

    - name: Deploy Helm
      uses: bitovi/github-actions-deploy-eks-helm@v1.2.12
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{env.AWS_REGION}}
        cluster-name: ${{env.EKS_CLUSTER}}
        # config-files: .github/values/dev.yaml
        chart-path: helm/vprofilecharts
        namespace: default
        values: appimage=${{ secrets.REGISTRY }}/${{ env.ECR_REPOSITORY }},apptag=${{ github.run_number }}
        name: vprofile_stack

    
    




####

       
      
  